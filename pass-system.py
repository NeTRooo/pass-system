# –ò–º–ø–æ—Ä—Ç—ã –¥–∏—Å–∫–æ—Ä–¥–∞
from nextcord import Interaction, SlashOption, ChannelType
from nextcord.abc import GuildChannel
from nextcord.ext import commands, tasks
from nextcord import Webhook
import nextcord
import asyncio
import aiohttp
# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞
from settings import pass_system, rcon, webhooks  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
# –ò–º–ø–æ—Ä—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import datetime
import sqlite3  # –ë–î –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–¥–µ
from mcrcon import MCRcon  # RCON –∫–æ–Ω—Å–æ–ª—å


db = sqlite3.connect('pass-system.sqlite3')
sql = db.cursor()

# dev_db = sqlite3.connect('dev.sqlite3')
# dev_sql = dev_db.cursor()

heylon_db = sqlite3.connect('heylon.sqlite3')
heylon_sql = heylon_db.cursor()

client = commands.AutoShardedBot(shard_count=1, command_prefix='+', intents=nextcord.Intents.all())
client.remove_command('help')

@client.event
async def on_shard_ready(shard_id):
    
    print(f'Logged in as {client.user.name} - {client.user.id}')
    
    # for text in dev_sql.execute(f"SELECT status FROM all_status WHERE id = {pass_system['BOT_ID']}"):
    #     text = text[0]
    # await client.change_presence(status=nextcord.Status.idle, activity=nextcord.Game(f"{text}"))
    
    # channel = (await client.fetch_channel(pass_system['TRACKED_C']))
    # msg = (await channel.fetch_message(pass_system['TRACKED_M']))
    # view = PassView()
    # emb01 = nextcord.Embed(
    #     title=f":tools: –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
    #     description=f"–í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç.",
    #     color=pass_system['MAIN_C']
    # )
    # emb01.set_footer(text=f'–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤', icon_url=f'{client.user.avatar.url}')
    # await msg.edit(embed=emb01, view=view)
    
    channel = (await client.fetch_channel(pass_system['TRACKED_C2']))
    msg = (await channel.fetch_message(pass_system['TRACKED_M2']))
    for status in sql.execute(f"SELECT status FROM pass_status"):
        status = status[0]
        if status == 'open':
            status = '‚úÖ  –ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç'
        else:
            status = '‚õîÔ∏è  –ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç'
    for all_slots in sql.execute(f"SELECT all_slots FROM pass_status"):
        all_slots = all_slots[0]
    for total_requests in sql.execute(f"SELECT total_requests FROM pass_status"):
        total_requests = total_requests[0]
    for all_requests in sql.execute(f"SELECT all_requests FROM pass_status"):
        all_requests = all_requests[0]
    view = PassView()
    emb01 = nextcord.Embed(
        title=f"üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏",
        description=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä **–ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É**.\n–ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π **–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ** —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ:"
                    f"\n\n‚Ä¢ –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞—è–≤–∫–∏, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —Ä–∞–∑–±–µ–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã."
                    f"\n\n‚Ä¢ –ü–∏—à–∏—Ç–µ —Ç–∞–∫, –∫–∞–∫ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º, –Ω–µ –ø—Ä–∏—É–∫—Ä–∞—à–∞–π—Ç–µ."
                    f"\n\n‚Ä¢ –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ —Å–µ–±–µ, –∑–∞—è–≤–∫–∏ –≤ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä—è–¥-–ª–∏ –±—É–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω—ã."
                    f"\n\n‚Ä¢ –ó–∞—è–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∂–¥–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.",
        color=pass_system['MAIN_C2']
    )
    emb01.set_footer(text=f'{status}\n–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {all_slots} | –ó–∞—è–≤–æ–∫ –Ω–∞ –Ω–∞–±–æ—Ä: {total_requests} | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {all_requests}')
    await msg.edit(embed=emb01, view=view)

@client.event
async def on_message(message):
    if isinstance(message.channel, nextcord.channel.DMChannel):
        async with aiohttp.ClientSession() as session:
            webhook = Webhook.from_url(webhooks1['BOT_DM'], session=session)
            await webhook.send(f"{message.author} > {message.content}")
        await client.process_commands(message)
    else:
        await client.process_commands(message)


#
#       –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–æ—á–∫–∞–º–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞/–∑–∞—è–≤–∫–∏
#


# @client.command(aliases=['c'])
# async def __c(ctx):
#     view = PassView()
#     emb01 = nextcord.Embed(
#         title=f"üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏",
#         description=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä **–ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É**.\n–ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π **–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ** —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ:"
#                     f"\n\n‚Ä¢ –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞—è–≤–∫–∏, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —Ä–∞–∑–±–µ–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã."
#                     f"\n\n‚Ä¢ –ü–∏—à–∏—Ç–µ —Ç–∞–∫, –∫–∞–∫ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º, –Ω–µ –ø—Ä–∏—É–∫—Ä–∞—à–∞–π—Ç–µ."
#                     f"\n\n‚Ä¢ –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ —Å–µ–±–µ, –∑–∞—è–≤–∫–∏ –≤ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä—è–¥-–ª–∏ –±—É–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω—ã."
#                     f"\n\n‚Ä¢ –ó–∞—è–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∂–¥–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.",
#         color=pass_system['MAIN_C2']
#     )
#     emb01.set_footer(text=f'‚õîÔ∏è  –ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç\n–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: 0 | –ó–∞—è–≤–æ–∫ –Ω–∞ –Ω–∞–±–æ—Ä: 0 | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: 65')
#     await ctx.send(embed=emb01, view=view)


#
#       –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞—è–≤–æ–∫
#


@client.command(aliases=['nick'])
async def __nick(ctx, nick):
    for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {ctx.author.id}"):
        status = status[0]
    if status == 'admin':
        sql.execute(f"""UPDATE pass_info SET nick = '{nick}' WHERE channel_id = {ctx.channel.id}""")
        db.commit()
        await ctx.send(f'–ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω.')

@client.command(aliases=['close'])
async def __close(ctx):
    for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {ctx.author.id}"):
        status = status[0]
    if status == 'admin':
        for player_id in sql.execute(f"SELECT player_id FROM pass_info WHERE channel_id = {ctx.channel.id}"):
            player_id = player_id[0]
        user = (await client.fetch_user(player_id))
        new_tc_ch_overwrites = {
            user: nextcord.PermissionOverwrite(read_messages=False, send_messages=False),
            ctx.guild.default_role: nextcord.PermissionOverwrite(read_messages=False)
        }
        await ctx.channel.edit(overwrites=new_tc_ch_overwrites)
        await ctx.send(f'–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.')

@client.command(aliases=['accept'])
async def __accept(ctx):
    for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {ctx.author.id}"):
        status = status[0]
    if status == 'admin':
        emb02 = nextcord.Embed(
            title=f':white_check_mark: –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞',
            description=f'–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —á–µ–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä. –ü–ª—é—Å —á–µ—Ä–µ–∑ RCON –¥–æ–±–∞–≤–∏—Ç—å —á–µ–ª–∏–∫—Å–∞ –≤ –≤–∞–π—Ç–ª–∏—Å—Ç.'
                        f'\n–ü–ª—é—Å —Å–º–µ–Ω–∏—Ç—å —á–µ–ª–∏–∫—Å—É –Ω–∏–∫ –≤ –¥—Å –≥–∏–ª—å–¥–∏–∏. –ü–ª—é—Å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª—Å.',
            color=pass_system['SUCC_C']
        )
        await ctx.send(embed=emb02)

@client.command(aliases=['deny'])
async def __deny(ctx):
    for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {ctx.author.id}"):
        status = status[0]
    if status == 'admin':
        emb02 = nextcord.Embed(
            title=f':white_check_mark: –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
            description=f'–ù–∞–≤–µ—Ä–Ω–æ–µ –Ω—É–∂–Ω–æ –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —á–µ–ª–∏–∫—Å—É –æ—Ç–∫–∞–∑–∞–Ω–æ. –ü–ª—é—Å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª—Å',
            color=pass_system['ERROR_C']
        )
        await ctx.send(embed=emb02)

@client.command(aliases=['pass'])
async def __pass(ctx, status, slots=0):
    for u_status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {ctx.author.id}"):
        u_status = u_status[0]
    if u_status == 'admin':
        if status == 'open':
            sql.execute(f"""UPDATE pass_status SET status = '{status}'""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET all_slots = {slots}""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET total_requests = 0""")
            db.commit()
            await ctx.send('–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç.')
        elif status == 'closed':
            sql.execute(f"""UPDATE pass_status SET status = '{status}'""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET all_slots = {slots}""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET total_requests = 0""")
            db.commit()
            await ctx.send('–ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç.')
        
        if status == 'closed' or status == 'open':
            channel = (await client.fetch_channel(pass_system['TRACKED_C2']))
            msg = (await channel.fetch_message(pass_system['TRACKED_M2']))
            if status == 'open':
                status = '‚úÖ  –ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç'
            else:
                status = '‚õîÔ∏è  –ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç'
            for all_requests in sql.execute(f"SELECT all_requests FROM pass_status"):
                all_requests = all_requests[0]
            view = PassView()
            emb01 = nextcord.Embed(
                title=f"üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏",
                description=f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä **–ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É**.\n–ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π **–ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ** —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–∞—è–≤–∫–µ:"
                            f"\n\n‚Ä¢ –ü–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å—é –∑–∞—è–≤–∫–∏, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, —Ä–∞–∑–±–µ–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–±–∑–∞—Ü—ã."
                            f"\n\n‚Ä¢ –ü–∏—à–∏—Ç–µ —Ç–∞–∫, –∫–∞–∫ —Å—á–∏—Ç–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º, –Ω–µ –ø—Ä–∏—É–∫—Ä–∞—à–∞–π—Ç–µ."
                            f"\n\n‚Ä¢ –ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ —Å–µ–±–µ, –∑–∞—è–≤–∫–∏ –≤ –¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—Ä—è–¥-–ª–∏ –±—É–¥—É—Ç –æ–¥–æ–±—Ä–µ–Ω—ã."
                            f"\n\n‚Ä¢ –ó–∞—è–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—á–µ—Ä–µ–¥–∏, –∫–∞–∂–¥–∞—è –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞.",
                color=pass_system['MAIN_C2']
            )
            emb01.set_footer(text=f'{status}\n–û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {slots} | –ó–∞—è–≤–æ–∫ –Ω–∞ –Ω–∞–±–æ—Ä: 0 | –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {all_requests}')
            await msg.edit(embed=emb01, view=view)


#
#       –ö–Ω–æ–ø–æ—á–∫–∏ –ø—Ä–æ—Ö–æ–¥–æ–∫ –ù–ê–ß–ê–õ–û
#


class PassOpenView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    async def handle_click(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        channel = (await client.fetch_channel(interaction.channel_id))
        msg = (await channel.fetch_message(interaction.message.id))
        user = (await client.fetch_user(interaction.user.id))
        guild = (await client.fetch_guild(interaction.guild_id))
        if str(button.emoji) == 'üîí':
            for player_id in sql.execute(f"SELECT player_id FROM pass_info WHERE channel_id = {channel.id}"):
                player_id = player_id[0]
            user = (await client.fetch_user(player_id))
            new_tc_ch_overwrites = {
                user: nextcord.PermissionOverwrite(read_messages=False, send_messages=False),
                guild.default_role: nextcord.PermissionOverwrite(read_messages=False)
            }
            await channel.edit(overwrites=new_tc_ch_overwrites)
            await channel.send(f'–ó–∞—è–≤–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞.')
        if str(button.emoji) == 'üëã':
            for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {user.id}"):
                status = status[0]
            if status == 'admin':
                emb02 = nextcord.Embed(
                    title=f':white_check_mark: –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞',
                    description=f'–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —á–µ–ª–∏–∫ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
                    color=pass_system['SUCC_C']
                )
                await interaction.response.send_message(embed=emb02)
                
                for pl_nick in sql.execute("SELECT nick FROM pass_info WHERE channel_id = {channel.id}"):
                    pl_nick = pl_nick[0]
                emb0666 = nextcord.Embed(
                    title=f"",
                    description=f"–ü–æ–ª—É—á–∏–ª –ø—Ä–æ—Ö–æ–¥–∫—É –ø–æ –Ω–∞–±–æ—Ä—É",
                    color=0x58b9ff
                )
                emb0666.set_author(name=f"{pl_nick}", icon_url=f"https://cravatar.eu/helmavatar/{pl_nick}")
                async with aiohttp.ClientSession() as session:
                    webhook = Webhook.from_url(webhooks['PASS_WEB'], session=session)
                    await webhook.send(f"{user.mention}", embed=emb0666)
                
                mcr = MCRcon(f"{rcon['RCON_IP']}", f"{rcon['RCON_PASSWORD']}")
                mcr.connect()
                mcr.command(f"easywl add {pl_nick}")
                mcr.disconnect()
                if ((message.author.id != message.guild.owner_id) and (message.author.id != 445523159027023882)):
                    await user.edit(nick=f"{pl_nick}")
                else:
                    await channel.send("–ò–∑–≤–∏–Ω–∏—Ç–µ —è –Ω–µ —Å–º–æ–≥—É —Å–º–µ–Ω–∏—Ç—å –≤–∞–º –Ω–∏–∫ –≤ –¥—Å, —Ç–∫ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞")
                dmchannel = (await user.create_dm())
                await dmchannel.send(f"–¢–∏–∫–µ—Ç {count} –∑–∞–∫—Ä—ã—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ª–æ–≥-—Ñ–∞–π–ª —Ç–∏–∫–µ—Ç–∞.")
                
            else:
                emb = nextcord.Embed(
                    title=f'‚ö†Ô∏è –û—à–∏–±–∫–∞',
                    description=f'–î–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.',
                    color=pass_system['ERROR_C']
                )
                await interaction.response.send_message("", embed=emb, ephemeral=True)
        if str(button.emoji) == 'üëé':
            for status in heylon_sql.execute(f"SELECT status FROM heylon_users WHERE id = {user.id}"):
                status = status[0]
            if status == 'admin':
                emb02 = nextcord.Embed(
                    title=f':white_check_mark: –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                    description=f'–ù–∞–≤–µ—Ä–Ω–æ–µ –Ω—É–∂–Ω–æ –≤ –∫–∞–∫–æ–π-—Ç–æ –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ —á–µ–ª–∏–∫—Å—É –æ—Ç–∫–∞–∑–∞–Ω–æ. –ü–ª—é—Å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –≤ –ª—Å',
                    color=pass_system['ERROR_C']
                )
                await interaction.response.send_message(embed=emb02)
            else:
                emb = nextcord.Embed(
                    title=f'‚ö†Ô∏è –û—à–∏–±–∫–∞',
                    description=f'–î–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è.',
                    color=pass_system['ERROR_C']
                )
                await interaction.response.send_message("", embed=emb, ephemeral=True)
    
    @nextcord.ui.button(emoji='üîí', label='–ó–∞–∫—Ä—ã—Ç—å', style=nextcord.ButtonStyle.red)
    async def ticket_close_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await self.handle_click(button, interaction)

    @nextcord.ui.button(emoji='üëã', label='–û–¥–æ–±—Ä–∏—Ç—å', style=nextcord.ButtonStyle.grey)
    async def ticket_accept_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await self.handle_click(button, interaction)
    
    @nextcord.ui.button(emoji='üëé', label='–û—Ç–∫–ª–æ–Ω–∏—Ç—å', style=nextcord.ButtonStyle.red)
    async def ticket_deny_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await self.handle_click(button, interaction)


class PassView(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    async def handle_click(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        for pass_status in sql.execute(f"SELECT status FROM pass_status"):
            pass_status = pass_status[0]
        if pass_status == 'open': # open
            channel = (await client.fetch_channel(pass_system['TRACKED_C']))
            user = (await client.fetch_user(interaction.user.id))
            guild = (await client.fetch_guild(interaction.guild_id))
            
            for count in sql.execute(f"SELECT count (rowid) as countrowid FROM pass_info"):
                count = count[0]
                pass_count = count
                count = count + 1
            
            tc_ch = await channel.category.create_text_channel(name=f'–∑–∞—è–≤–∫–∞-{pass_count}')
            tc_ch.overwrites.update()
            new_tc_ch_overwrites = {
                user: nextcord.PermissionOverwrite(read_messages=True, send_messages=True),
                guild.default_role: nextcord.PermissionOverwrite(read_messages=False)
            }
            await tc_ch.edit(overwrites=new_tc_ch_overwrites)
            
            sql.execute(f"""INSERT INTO pass_info (id, player_id, channel_id) VALUES ({count}, {user.id}, {tc_ch.id})""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET total_requests = total_requests + 1""")
            db.commit()
            sql.execute(f"""UPDATE pass_status SET all_requests = all_requests + 1""")
            db.commit()
            
            view = PassOpenView()
            emb01 = nextcord.Embed(
                title=f'üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏',
                description=f'–°–ª–µ–¥—É–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫ –∑–∞—è–≤–∫–µ¬†–≤ –∫–∞–Ω–∞–ª–µ #–ø–æ–¥–∞—Ç—å-–∑–∞—è–≤–∫—É. –ü–∏—à–∏—Ç–µ –∑–∞—è–≤–∫—É —Ç–∞–∫, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ, –≥–ª–∞–≤–Ω–æ–µ - —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ, —É–≤–ª–µ—á–µ–Ω–∏—è—Ö, –ø–ª–∞–Ω–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä.',
                color=pass_system['MAIN_C2']
            )
            emb01.set_footer(text=f"–ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∑–∞—è–≤–∫—É, –ø–æ–∑–∂–µ —Å –≤–∞–º–∏ –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –∑–∞–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.")
            await tc_ch.send(f"{user.mention}", embed=emb01, view=view)
            
            emb91 = nextcord.Embed(title=':white_check_mark: –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',description=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {tc_ch.mention}',color=pass_system['SUCC_C'])
            emb91.set_footer(text=f"–°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤", icon_url=f"{client.user.avatar.url}")
            await interaction.response.send_message("", embed=emb91, ephemeral=True)
            
            nick_msg = await tc_ch.send(f"{user.mention}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ—á–Ω—ã–π –Ω–∏–∫.\n–û–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≤ —Å–ª—É—á–∞–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏."
                                        f"\n–ù–∏–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 300 —Å–µ–∫—É–Ω–¥.")
            
            def pos1(message):
                return message.channel.id == tc_ch.id
            try:
                msg23 = await client.wait_for('message', timeout=300.0, check=pos1)
            except asyncio.TimeoutError:
                await nick_msg.delete()
            else:
                sql.execute(f"""UPDATE pass_info SET nick = '{msg23.content}' WHERE channel_id = {tc_ch.id}""")
                db.commit()
                await nick_msg.delete()
        
        else: # closed
            emb91 = nextcord.Embed(title=':no_entry_sign:  –ù–∞–±–æ—Ä –∑–∞–∫—Ä—ã—Ç',description=f'–î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞, –æ –Ω—ë–º –æ–ø–æ–≤–µ—Å—Ç–∏–º –∑–∞—Ä–∞–Ω–µ–µ –≤ –∫–∞–Ω–∞–ª–µ #–Ω–æ–≤–æ—Å—Ç–∏',color=pass_system['ERROR_C'])
            await interaction.response.send_message("", embed=emb91, ephemeral=True)
        

    @nextcord.ui.button(label='–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', style=nextcord.ButtonStyle.primary)
    async def create_ticket_button(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await self.handle_click(button, interaction)



#
#       –ö–Ω–æ–ø–æ—á–∫–∏ –ø—Ä–æ—Ö–æ–¥–æ–∫ –ö–û–ù–ï–¶
#


client.run(pass_system['TOKEN'])